Operand: 
PI
Operator: 
=
Operand: 
3.14159
Operand: 
$global_var
Operator: 
=
Operand: 
"Это глобальная переменная"
Declaration: 
class ExampleClass
Operand: 
@@class_var
Operator: 
=
Operand: 
"Это переменная класса"
Declaration: 
def initialize(value)
    
Operand: 
@instance_var
Operator: 
=
Operand: 
value
Declaration: 
def self.class_method
    
Operator: 
puts
Operand: 
"Это метод класса"
Declaration: 
def instance_method
    
Operator: 
puts
Operand: 
"Это метод экземпляра"
Declaration: 
def method_with_super
    
Operator: 
super
Operator: 
if
Operand: 
defined?(
Operator: 
super
Operator: 
initialize(
Operand: 
100
Operand: 
aa
Operator: 
=
Operator: 
(
Operand: 
100
Operator: 
+
Operand: 
200
Operator: 
/
Operand: 
300
Declaration: 
module ExampleModule
Declaration: 
def module_method
    
Operator: 
puts
Operand: 
"Это метод модуля"
Declaration: 
class AnotherClass
Operand: 
ExampleModule
Operand: 
a
Operator: 
=
Operand: 
10
Operand: 
b
Operator: 
=
Operand: 
5
Operand: 
sum
Operator: 
=
Operand: 
a
Operator: 
+
Operand: 
b
Operand: 
difference
Operator: 
=
Operand: 
a
Operator: 
-
Operand: 
b
Operand: 
product
Operator: 
=
Operand: 
a
Operator: 
*
Operand: 
b
Operand: 
quotient
Operator: 
=
Operand: 
a
Operator: 
/
Operand: 
b
Operand: 
remainder
Operator: 
=
Operand: 
a
Operator: 
%
Operand: 
b
Operand: 
power
Operator: 
=
Operand: 
a
Operator: 
**
Operand: 
b
Operand: 
logical_and
Operator: 
=
Operand: 
true
Operator: 
&&
Operand: 
false
Operand: 
logical_or
Operator: 
=
Operand: 
true
Operator: 
||
Operand: 
false
Operand: 
bitwise_and
Operator: 
=
Operand: 
a
Operator: 
&
Operand: 
b
Operand: 
bitwise_or
Operator: 
=
Operand: 
a
Operator: 
|
Operand: 
b
Operand: 
bitwise_xor
Operator: 
=
Operand: 
a
Operator: 
^
Operand: 
b
Operand: 
bitwise_not
Operator: 
=
Operator: 
~
Operand: 
a
Operand: 
bitwise_shift_left
Operator: 
=
Operand: 
a
Operator: 
<<
Operand: 
1
Operand: 
bitwise_shift_right
Operator: 
=
Operand: 
a
Operator: 
>>
Operand: 
1
Operator: 
if
Operand: 
a
Operator: 
>
Operand: 
b
Operator: 
puts
Operand: 
"a больше b"
Operand: 
a
Operator: 
<
Operand: 
b
Operator: 
puts
Operand: 
"a меньше b"
Operator: 
puts
Operand: 
"a равно b"
Operand: 
max
Operator: 
=
Operand: 
a
Operator: 
>
Operand: 
b
Operator: 
?
Operand: 
a
Operand: 
b
Operator: 
while
Operand: 
a
Operator: 
>
Operand: 
0
Operator: 
puts
Operand: 
a
Operand: 
a
Operator: 
-=
Operand: 
1
Operator: 
until
Operand: 
b
Operator: 
==
Operand: 
0
Operator: 
puts
Operand: 
b
Operand: 
b
Operator: 
-=
Operand: 
1
Operator: 
for i in
Operand: 
1..5
Operator: 
puts
Operand: 
i
Operand: 
3
Operator: 
.
Operator: 
times
Operator: 
{
Operator: 
puts
Operand: 
"Hello"
Operand: 
my_lambda
Operator: 
=
Operator: 
{
Operand: 
x
Operator: 
*
Operand: 
2
Operator: 
puts
Operand: 
my_lambda
Operator: 
.
Operator: 
call(
Operand: 
5
Operator: 
begin
Operator: 
raise
Operand: 
"Ошибка!"
Operator: 
=>
Operand: 
e
Operator: 
puts
Operand: 
"Поймано исключение: #{e.message}"
Operator: 
puts
Operand: 
"Это выполняется в любом случае"
Operand: 
range_inclusive
Operator: 
=
Operand: 
(1..5)
Operand: 
range_exclusive
Operator: 
=
Operand: 
(1...5)
Operand: 
symbol
Operator: 
=
Operand: 
:my_symbol
Operand: 
double_quoted
Operator: 
=
Operand: 
"Это строка"
Operand: 
single_quoted
Operator: 
=
Operand: 
'Это строка'
Operand: 
percent_quoted
Operator: 
=
Operand: 
%q[Это строка]

Operand: 
array
Operator: 
=
Operand: 
[1, 2, 3, 4, 5]

Operand: 
result
Operator: 
=
Operand: 
array
Operator: 
.
Operator: 
map
Operator: 
{
Operand: 
x
Operator: 
*
Operand: 
2
Operator: 
.
Operator: 
select
Operator: 
{
Operand: 
x
Operator: 
>
Operand: 
5
Operand: 
x
Operator: 
=
Operand: 
10
Operand: 
x
Operator: 
+=
Operand: 
5
Operand: 
x
Operator: 
-=
Operand: 
3
Operand: 
x
Operator: 
*=
Operand: 
2
Operand: 
x
Operator: 
/=
Operand: 
4
Operand: 
condition
Operator: 
=
Operand: 
true
Operator: 
puts
Operand: 
condition
Operator: 
?
Operand: 
"True"
Operand: 
"False"
Operator: 
if
Operand: 
a
Operator: 
>
Operand: 
0
Operator: 
&&
Operand: 
b
Operator: 
>
Operand: 
0
Operator: 
puts
Operand: 
"Оба положительные"
Declaration: 
def example_method(*args, **kwargs)
  
Operator: 
puts
Operand: 
"Аргументы: #{args}"
Operator: 
puts
Operand: 
"Ключевые аргументы: #{kwargs}"
Operator: 
example_method(
Operand: 
1
Operand: 
2
Operand: 
3
Operand: 
integer_literal
Operator: 
=
Operand: 
42
Operand: 
float_literal
Operator: 
=
Operand: 
3.14
Operand: 
binary_literal
Operator: 
=
Operand: 
0b1010
Operand: 
octal_literal
Operator: 
=
Operand: 
0o52
Operand: 
hex_literal
Operator: 
=
Operand: 
0x2A
Declaration: 
def add(x, y)
  
Operand: 
x
Operator: 
+
Operand: 
y
Operator: 
puts
Operator: 
add(
Operand: 
2
Operand: 
3
Operator: 
puts
Operand: 
1
Operator: 
+
Operand: 
2
Operator: 
puts
Operand: 
3
Operator: 
-
Operand: 
1
Operator: 
puts
Operand: 
2
Operator: 
*
Operand: 
3
Operator: 
puts
Operand: 
4
Operator: 
/
Operand: 
2
Operator: 
puts
Operand: 
5
Operator: 
%
Operand: 
2
Operator: 
puts
Operand: 
2
Operator: 
**
Operand: 
3
Operator: 
puts
Operand: 
1
Operator: 
&
Operand: 
1
Operator: 
puts
Operand: 
1
Operator: 
|
Operand: 
0
Operator: 
puts
Operand: 
1
Operator: 
^
Operand: 
0
Operator: 
puts
Operand: 
2
Operator: 
<<
Operand: 
1
Operator: 
puts
Operand: 
4
Operator: 
>>
Operand: 
1
Operator: 
puts
Operand: 
1
Operator: 
==
Operand: 
1
Operator: 
puts
Operand: 
1
Operator: 
!=
Operand: 
2
Operator: 
puts
Operand: 
1
Operator: 
===
Operand: 
1
Operator: 
puts
Operand: 
1
Operator: 
<=>
Operand: 
2
Operator: 
puts
Operand: 
1
Operator: 
<
Operand: 
2
Operator: 
puts
Operand: 
2
Operator: 
<=
Operand: 
2
Operator: 
puts
Operand: 
3
Operator: 
>
Operand: 
2
Operator: 
puts
Operand: 
3
Operator: 
>=
Operand: 
2
Operator: 
puts
Operand: 
defined?(
Operand: 
a
Operator: 
BEGIN
{
Operator: 
puts
Operand: 
"Это выполняется перед всем остальным"
Operator: 
END
{
Operator: 
puts
Operand: 
"Это выполняется после всего остального"
Declaration: 
def super
Declaration: 
def call
Declaration: 
def map
Declaration: 
def select
