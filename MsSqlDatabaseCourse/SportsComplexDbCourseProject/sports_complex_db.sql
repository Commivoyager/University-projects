/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 16.0 		*/
/*  Created On : 16-май-2025 12:30:18 				*/
/*  DBMS       : SQL Server 2012 						*/
/* ---------------------------------------------------- */

/* Drop Foreign Key Constraints */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_activity_activity_type]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [activity] DROP CONSTRAINT [FK_activity_activity_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_activity_sport_type]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [activity] DROP CONSTRAINT [FK_activity_sport_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_client_discount_client]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [client_discount] DROP CONSTRAINT [FK_client_discount_client]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_client_visit_activity]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [client_visit] DROP CONSTRAINT [FK_client_visit_activity]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_client_visit_subscription]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [client_visit] DROP CONSTRAINT [FK_client_visit_subscription]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_coach_employee]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [coach] DROP CONSTRAINT [FK_coach_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_coach_sports_category]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [coach] DROP CONSTRAINT [FK_coach_sports_category]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_department_employee]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [department] DROP CONSTRAINT [FK_department_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_employee]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment] DROP CONSTRAINT [FK_equipment_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_equipment_state]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment] DROP CONSTRAINT [FK_equipment_equipment_state]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_equipment_type]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment] DROP CONSTRAINT [FK_equipment_equipment_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_location]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment] DROP CONSTRAINT [FK_equipment_location]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_location_journal_equipment]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment_location_journal] DROP CONSTRAINT [FK_equipment_location_journal_equipment]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_location_journal_location]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment_location_journal] DROP CONSTRAINT [FK_equipment_location_journal_location]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_location_journal_location_02]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment_location_journal] DROP CONSTRAINT [FK_equipment_location_journal_location_02]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_state_journal_employee]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment_state_journal] DROP CONSTRAINT [FK_equipment_state_journal_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_state_journal_equipment]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment_state_journal] DROP CONSTRAINT [FK_equipment_state_journal_equipment]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_state_journal_equipment_state_new]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment_state_journal] DROP CONSTRAINT [FK_equipment_state_journal_equipment_state_new]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_equipment_state_journal_equipment_state_previous]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [equipment_state_journal] DROP CONSTRAINT [FK_equipment_state_journal_equipment_state_previous]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_event_employee]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [event] DROP CONSTRAINT [FK_event_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_event_event_type]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [event] DROP CONSTRAINT [FK_event_event_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_inventory_inventory_type]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [inventory] DROP CONSTRAINT [FK_inventory_inventory_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_inventory_inventory_unit]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [inventory] DROP CONSTRAINT [FK_inventory_inventory_unit]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_location_building]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [location] DROP CONSTRAINT [FK_location_building]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_activity_coach_activity]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_activity_coach] DROP CONSTRAINT [FK_m2m_activity_coach_activity]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_activity_coach_coach]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_activity_coach] DROP CONSTRAINT [FK_m2m_activity_coach_coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_coach_sport_type_coach]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_coach_sport_type] DROP CONSTRAINT [FK_m2m_coach_sport_type_coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_coach_sport_type_sport_type]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_coach_sport_type] DROP CONSTRAINT [FK_m2m_coach_sport_type_sport_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_department_employee_department]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_department_employee] DROP CONSTRAINT [FK_m2m_department_employee_department]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_department_employee_employee]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_department_employee] DROP CONSTRAINT [FK_m2m_department_employee_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_employee_position_employee]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_employee_position] DROP CONSTRAINT [FK_m2m_employee_position_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_employee_position_position]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_employee_position] DROP CONSTRAINT [FK_m2m_employee_position_position]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_inventory_zone_inventory]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_inventory_zone] DROP CONSTRAINT [FK_m2m_inventory_zone_inventory]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_inventory_zone_zone]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_inventory_zone] DROP CONSTRAINT [FK_m2m_inventory_zone_zone]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_membership_activity_activity]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_membership_activity] DROP CONSTRAINT [FK_m2m_membership_activity_activity]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_membership_activity_membeership]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_membership_activity] DROP CONSTRAINT [FK_m2m_membership_activity_membeership]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_membership_schedule_pattern_membeership]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_membership_schedule_pattern] DROP CONSTRAINT [FK_m2m_membership_schedule_pattern_membeership]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_membership_schedule_pattern_schedule_recurrence_pattern]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_membership_schedule_pattern] DROP CONSTRAINT [FK_m2m_membership_schedule_pattern_schedule_recurrence_pattern]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_schedule_item_coach_coach]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_schedule_item_coach] DROP CONSTRAINT [FK_m2m_schedule_item_coach_coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_schedule_item_coach_schedule_item]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_schedule_item_coach] DROP CONSTRAINT [FK_m2m_schedule_item_coach_schedule_item]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_zone_location_location]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_zone_location] DROP CONSTRAINT [FK_m2m_zone_location_location]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_m2m_zone_location_zone]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [m2m_zone_location] DROP CONSTRAINT [FK_m2m_zone_location_zone]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_payment_client]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [payment] DROP CONSTRAINT [FK_payment_client]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_payment_payment_method]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [payment] DROP CONSTRAINT [FK_payment_payment_method]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_schedule_item_calendar]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [schedule_item] DROP CONSTRAINT [FK_schedule_item_calendar]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_schedule_item_schedule_recurrence_pattern]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [schedule_item] DROP CONSTRAINT [FK_schedule_item_schedule_recurrence_pattern]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_schedule_pattern_coach_coach]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [schedule_pattern_coach] DROP CONSTRAINT [FK_schedule_pattern_coach_coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_schedule_pattern_coach_schedule_recurrence_pattern]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [schedule_pattern_coach] DROP CONSTRAINT [FK_schedule_pattern_coach_schedule_recurrence_pattern]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_schedule_recurrence_pattern_activity]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [schedule_recurrence_pattern] DROP CONSTRAINT [FK_schedule_recurrence_pattern_activity]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_schedule_recurrence_pattern_location]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [schedule_recurrence_pattern] DROP CONSTRAINT [FK_schedule_recurrence_pattern_location]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_schedule_recurrence_pattern_schedule_recurrence_type]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [schedule_recurrence_pattern] DROP CONSTRAINT [FK_schedule_recurrence_pattern_schedule_recurrence_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_subscription_client]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [subscription] DROP CONSTRAINT [FK_subscription_client]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_subscription_membeership]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [subscription] DROP CONSTRAINT [FK_subscription_membeership]
GO

/* Drop Views */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[activity_catalog_view]') AND OBJECTPROPERTY(id, N'IsView') = 1) 
DROP VIEW [activity_catalog_view]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[equipment_info_view]') AND OBJECTPROPERTY(id, N'IsView') = 1) 
DROP VIEW [equipment_info_view]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[schedule_view]') AND OBJECTPROPERTY(id, N'IsView') = 1) 
DROP VIEW [schedule_view]
GO

/* Drop Tables */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[activity]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [activity]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[activity_type]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [activity_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[building]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [building]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[calendar]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [calendar]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[client]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [client]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[client_discount]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [client_discount]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[client_group]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [client_group]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[client_visit]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [client_visit]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[coach]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[department]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [department]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[employee]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[equipment]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [equipment]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[equipment_location_journal]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [equipment_location_journal]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[equipment_state]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [equipment_state]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[equipment_state_journal]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [equipment_state_journal]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[equipment_type]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [equipment_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[event]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [event]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[event_type]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [event_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[inventory]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [inventory]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[inventory_type]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [inventory_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[inventory_unit]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [inventory_unit]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[location]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [location]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_activity_coach]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_activity_coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_coach_sport_type]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_coach_sport_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_department_employee]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_department_employee]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_employee_position]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_employee_position]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_inventory_zone]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_inventory_zone]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_membership_activity]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_membership_activity]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_membership_schedule_pattern]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_membership_schedule_pattern]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_schedule_item_coach]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_schedule_item_coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[m2m_zone_location]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [m2m_zone_location]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[membeership]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [membeership]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[payment]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [payment]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[payment_method]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [payment_method]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[position]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [position]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[schedule_item]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [schedule_item]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[schedule_pattern_coach]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [schedule_pattern_coach]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[schedule_recurrence_pattern]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [schedule_recurrence_pattern]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[schedule_recurrence_type]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [schedule_recurrence_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[sport_type]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [sport_type]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[sports_category]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [sports_category]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[subscription]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [subscription]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[zone]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [zone]
GO

/* Drop Stored Procedures */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FILL_CALENDAR]')) 
DROP PROCEDURE [FILL_CALENDAR]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FORM_SCHEDULE]')) 
DROP PROCEDURE [FORM_SCHEDULE]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[GENERATE_SCHEDULES_FOR_ALL_PATTERNS]')) 
DROP PROCEDURE [GENERATE_SCHEDULES_FOR_ALL_PATTERNS]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[MAINTAIN_AND_REGENERATE_SCHEDULE]')) 
DROP PROCEDURE [MAINTAIN_AND_REGENERATE_SCHEDULE]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[MAINTAIN_CALENDAR_ANNUALLY]')) 
DROP PROCEDURE [MAINTAIN_CALENDAR_ANNUALLY]
GO

/* Drop Functions */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[GET_REAL_WEEKDAY_NUMBER]')) 
DROP FUNCTION [GET_REAL_WEEKDAY_NUMBER]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[GET_WEEK_FIRST_DAY]')) 
DROP FUNCTION [GET_WEEK_FIRST_DAY]
GO

/* Create Functions */

IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.GET_REAL_WEEKDAY_NUMBER') AND type = 'FN')
DROP FUNCTION dbo.GET_REAL_WEEKDAY_NUMBER
GO

CREATE FUNCTION GET_REAL_WEEKDAY_NUMBER(@relative_num TINYINT)
RETURNS TINYINT
-- WITH SCHEMABINDING
AS
BEGIN
	DECLARE @date_first_num  TINYINT = @@DATEFIRST;
	DECLARE @real_weakday_temp TINYINT;
	SET @real_weakday_temp = (@relative_num + @date_first_num - 1 + 7) % 7;
	IF @real_weakday_temp = 0
		SET @real_weakday_temp = 7;
	RETURN 	@real_weakday_temp;          
END;
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'function', 'GET_REAL_WEEKDAY_NUMBER', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Функция для переевода номера дня недели в соответствующее значение относительно 
понедельника, когда он рассматривается в качестве первого дня 
(в MS SQL первым днём недели по умолчанию считается вообще воскресенье)', 'SCHEMA', 'dbo', 'function', 'GET_REAL_WEEKDAY_NUMBER' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Функция для переевода номера дня недели в соответствующее значение относительно 
понедельника, когда он рассматривается в качестве первого дня 
(в MS SQL первым днём недели по умолчанию считается вообще воскресенье)', 'SCHEMA', 'dbo', 'function', 'GET_REAL_WEEKDAY_NUMBER' 
end
GO

IF EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.GET_WEEK_FIRST_DAY') AND type = 'FN')
DROP FUNCTION dbo.GET_WEEK_FIRST_DAY
GO

CREATE FUNCTION GET_WEEK_FIRST_DAY(@curr_date DATE)
RETURNS DATE
-- WITH SCHEMABINDING
AS
BEGIN
	RETURN DATEADD(DAY, 1 - 
		dbo.GET_REAL_WEEKDAY_NUMBER(
			DATEPART(WEEKDAY, @curr_date)
		), 
		@curr_date)
END;
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'function', 'GET_WEEK_FIRST_DAY', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Функция для нахождения первого дня недели переданной даты', 'SCHEMA', 'dbo', 'function', 'GET_WEEK_FIRST_DAY' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Функция для нахождения первого дня недели переданной даты', 'SCHEMA', 'dbo', 'function', 'GET_WEEK_FIRST_DAY' 
end
GO

/* Create Tables */

CREATE TABLE [activity]
(
	[act_id] int NOT NULL IDENTITY (1, 1),
	[act_sport] smallint NOT NULL,
	[act_type] tinyint NULL,
	[act_capacity] smallint NOT NULL,
	[act_duration] smallint NOT NULL	-- Значение продолжительности в минутах
)
GO

CREATE TABLE [activity_type]
(
	[at_id] tinyint NOT NULL IDENTITY (1, 1),
	[at_name] nvarchar(150) NOT NULL,
	[at_description] varchar(500) NULL
)
GO

CREATE TABLE [building]
(
	[build_id] tinyint NOT NULL IDENTITY (1, 1),
	[build_name] nvarchar(150) NOT NULL
)
GO

CREATE TABLE [calendar]
(
	[cal_date] date NOT NULL,
	[cal_day_of_week] tinyint NOT NULL,
	[cal_day_of_week_in_bits] tinyint NOT NULL,
	[cal_day_of_month] tinyint NOT NULL,
	[cal_day_of_year] smallint NOT NULL,
	[cal_week_number] tinyint NOT NULL,
	[cal_month_number] tinyint NOT NULL,
	[cal_year] smallint NOT NULL,
	[cal_is_holiday] bit NOT NULL DEFAULT 0,
	[cal_description] nvarchar(500) NULL
)
GO

CREATE TABLE [client]
(
	[cl_id] int NOT NULL IDENTITY (1, 1),
	[cl_name] nvarchar(150) NOT NULL,
	[cl_last_name] nvarchar(150) NOT NULL,
	[cl_patronymic] nvarchar(150) NULL,
	[cl_birth_date] date NOT NULL,
	[cl_registration_date] date NOT NULL,
	[cl_phone] varchar(50) NULL,
	[cl_email] varchar(50) NULL
)
GO

CREATE TABLE [client_discount]
(
	[cdisc_id] int NOT NULL IDENTITY (1, 1),
	[cdisc_procent] decimal(5,2) NOT NULL,
	[cdisc_date_start] date NOT NULL,
	[cdisc_date_end] date NOT NULL,
	[cdisc_client] int NOT NULL
)
GO

CREATE TABLE [client_group]
(
	[cl_gr_id] int NOT NULL IDENTITY (1, 1),
	[cl_gr_age_group] smallint NULL,
	[cl_gr_type] int NULL
)
GO

CREATE TABLE [client_visit]
(
	[cvis_id] int NOT NULL IDENTITY (1, 1),
	[cvis_subscription] int NOT NULL,
	[cvis_date] date NOT NULL,
	[cvis_activity] int NOT NULL
)
GO

CREATE TABLE [coach]
(
	[coach_id] smallint NOT NULL IDENTITY (1, 1),
	[coach_rating] decimal(3,2) NULL,
	[coach_employee] int NOT NULL,	-- Связано с таблицей employee связью один к одному
	[coach_sports_category] tinyint NULL
)
GO

CREATE TABLE [department]
(
	[dep_id] smallint NOT NULL IDENTITY (1, 1),
	[dep_name] nvarchar(150) NOT NULL,
	[dep_manager] int NULL	-- Допустимо значение Null - менеджер отдела может отсутствовать
)
GO

CREATE TABLE [employee]
(
	[empl_id] int NOT NULL IDENTITY (1, 1),
	[empl_name] nvarchar(150) NOT NULL,
	[empl_last_name] nvarchar(150) NOT NULL,
	[emlp_patronymic] nvarchar(150) NOT NULL,
	[empl_birth_date] date NULL,
	[empl_salary] decimal(7,2) NOT NULL,
	[empl_hire_date] date NOT NULL,
	[empl_education] nvarchar(250) NULL,
	[empl_year_experience] tinyint NOT NULL,
	[empl_phone] varchar(20) NULL,
	[empl_email] nvarchar(150) NULL,
	[empl_is_active] bit NOT NULL DEFAULT 1	-- Поле, определяющее, работает ли сотрудник в комплексе
)
GO

CREATE TABLE [equipment]
(
	[eq_id] int NOT NULL IDENTITY (1, 1),
	[eq_name] nvarchar(150) NOT NULL,
	[eq_type] int NOT NULL,
	[eq_serial_number] nvarchar(150) NOT NULL,	-- Должен быть уникальным
	[eq_purchase_date] date NOT NULL,
	[eq_lifespan_end_date] date NOT NULL,
	[eq_state] smallint NOT NULL,
	[eq_location] int NULL,	-- Null, если утилизровано
	[eq_responsible] int NOT NULL
)
GO

CREATE TABLE [equipment_location_journal]
(
	[elj_id] int NOT NULL IDENTITY (1, 1),
	[elj_equipment] int NOT NULL,
	[elj_from_location] int NULL,	-- Null, если как таковой предыдущей локации не было (например, только что куплено)
	[elj_to_location] int NOT NULL,
	[elj_date] date NOT NULL,
	[elj_description] nvarchar(500) NULL
)
GO

CREATE TABLE [equipment_state]
(
	[est_id] smallint NOT NULL IDENTITY (1, 1),
	[est_name] nvarchar(150) NOT NULL
)
GO

CREATE TABLE [equipment_state_journal]
(
	[esj_id] int NOT NULL IDENTITY (1, 1),
	[esj_equipment] int NOT NULL,
	[esj_new_state] smallint NOT NULL,
	[esj_previous_state] smallint NULL,	-- Может быть Null, если как такового предыдущего состояния нет
	[esj_change_time] datetime2 NOT NULL,	-- Время изменения статуса состояния оборудования с точностью до секунд
	[esj_change_by] int NOT NULL,
	[esj_description] nvarchar(1000) NULL
)
GO

CREATE TABLE [equipment_type]
(
	[et_id] int NOT NULL IDENTITY (1, 1),
	[et_name] nvarchar(150) NOT NULL,
	[et_description] nvarchar(1000) NULL
)
GO

CREATE TABLE [event]
(
	[ev_id] int NOT NULL IDENTITY (1, 1),
	[ev_name] nvarchar(150) NOT NULL,
	[ev_date] date NOT NULL,
	[ev_responsible] int NOT NULL,
	[ev_type] smallint NOT NULL,
	[ev_description] nvarchar(500) NULL
)
GO

CREATE TABLE [event_type]
(
	[evt_id] smallint NOT NULL IDENTITY (1, 1),
	[evt_name] nvarchar(150) NOT NULL
)
GO

CREATE TABLE [inventory]
(
	[inv_id] int NOT NULL IDENTITY (1, 1),
	[inv_name] nvarchar(150) NOT NULL,
	[inv_unit] tinyint NULL,
	[inv_quantity] int NOT NULL,
	[inv_min_quantity] int NOT NULL,	-- Минимальное количесвто инвентаря данного типа, необходимое для комплекса
	[inv_type] int NULL
)
GO

CREATE TABLE [inventory_type]
(
	[it_id] int NOT NULL IDENTITY (1, 1),
	[it_name] nvarchar(150) NOT NULL,
	[it_description] nvarchar(500) NULL
)
GO

CREATE TABLE [inventory_unit]
(
	[iun_id] tinyint NOT NULL IDENTITY (1, 1),
	[iun_name] nvarchar(50) NOT NULL
)
GO

CREATE TABLE [location]
(
	[loc_id] int NOT NULL IDENTITY (1, 1),
	[loc_name] nvarchar(100) NOT NULL,
	[loc_building] tinyint NULL,	-- Null - если локация находится на улице
	[loc_floor] tinyint NULL,	-- Null, если loc_building равен Null
	[loc_room_number] smallint NULL,	-- Null, если loc_building равен Null иначе Null, если локация не имеет номера помещения
	[loc_area] decimal(7,2) NOT NULL,
	[loc_description] nvarchar(500) NULL	-- Уточнения по поводу местоположения локации
)
GO

CREATE TABLE [m2m_activity_coach]
(
	[ac_activity] int NOT NULL,
	[ac_coach] smallint NOT NULL
)
GO

CREATE TABLE [m2m_coach_sport_type]
(
	[cspt_coach] smallint NOT NULL,
	[cspt_sport_type] smallint NOT NULL	-- Таблица связи тренера и видов спорта, в которых он специализируется
)
GO

CREATE TABLE [m2m_department_employee]
(
	[de_department] smallint NOT NULL,
	[de_employee] int NOT NULL
)
GO

CREATE TABLE [m2m_employee_position]
(
	[ep_employee] int NOT NULL,
	[ep_position] smallint NOT NULL
)
GO

CREATE TABLE [m2m_inventory_zone]
(
	[iz_inventory] int NOT NULL,
	[iz_zone] smallint NOT NULL,
	[iz_quantity] int NOT NULL
)
GO

CREATE TABLE [m2m_membership_activity]
(
	[ma_membership] int NOT NULL,
	[ma_activity] int NOT NULL
)
GO

CREATE TABLE [m2m_membership_schedule_pattern]
(
	[msp_membership] int NOT NULL,
	[msp_schedule_pattern] int NOT NULL
)
GO

CREATE TABLE [m2m_schedule_item_coach]
(
	[sic_schedule_item] int NOT NULL,
	[sic_coach] smallint NOT NULL
)
GO

CREATE TABLE [m2m_zone_location]
(
	[zl_zone] smallint NOT NULL,
	[zl_location] int NOT NULL
)
GO

CREATE TABLE [membeership]
(
	[memb_id] int NOT NULL IDENTITY (1, 1),
	[memb_name] nvarchar(150) NOT NULL,
	[memb_price] decimal(10,2) NOT NULL,
	[memb_days_duration] smallint NULL,	-- Null - когда  это абонемент на посещение только по количеству раз (memb_visit_number в таком случае не может быть NULL)
	[memb_visit_number] smallint NULL	-- NULL - если абонемент безлимитный в пределах указанной продолжительности (memb_days_duration в таком случае не может быть NULL)
)
GO

CREATE TABLE [payment]
(
	[pay_id] int NOT NULL IDENTITY (1, 1),
	[pay_client] int NOT NULL,
	[pay_money] decimal(10,2) NOT NULL,
	[pay_date] date NOT NULL,
	[pay_method] tinyint NOT NULL
)
GO

CREATE TABLE [payment_method]
(
	[pm_id] tinyint NOT NULL IDENTITY (1, 1),
	[pm_name] nvarchar(100) NOT NULL
)
GO

CREATE TABLE [position]
(
	[pos_id] smallint NOT NULL IDENTITY (1, 1),
	[pos_name] nvarchar(150) NOT NULL,
	[pos_description] nvarchar(500) NULL
)
GO

CREATE TABLE [schedule_item]
(
	[si_id] int NOT NULL IDENTITY (1, 1),
	[si_schedule_pattern] int NULL,
	[si_activity_date] date NOT NULL
)
GO

CREATE TABLE [schedule_pattern_coach]
(
	[spc_id] int NOT NULL IDENTITY (1, 1),
	[spc_schedule_pattern] int NOT NULL,
	[spc_coach] smallint NOT NULL,
	[spc_start_date] date NOT NULL,
	[spc_end_date] date NULL,
	[spc_week_days] tinyint NOT NULL,
	[spc_recurrence_type] tinyint NOT NULL,
	[spc_recurrence_interval] tinyint NULL,
	[spc_start_interval] tinyint NOT NULL,
	[spc_description] nvarchar(500) NULL
)
GO

CREATE TABLE [schedule_recurrence_pattern]
(
	[srp_id] int NOT NULL IDENTITY (1, 1),
	[srp_activity] int NOT NULL,
	[srp_location] int NOT NULL,
	[srp_start_time] time NOT NULL,
	[srp_start_date] date NOT NULL,
	[srp_end_date] date NULL,	-- Null, если нет предполагаемой даты завершения такого расписания
	[srp_week_days] tinyint NOT NULL,
	[srp_recurrence_type] tinyint NOT NULL,
	[srp_recurrence_interval] tinyint NOT NULL,
	[srp_start_interval] tinyint NOT NULL,
	[srp_description] nvarchar(500) NULL
)
GO

CREATE TABLE [schedule_recurrence_type]
(
	[srt_id] tinyint NOT NULL IDENTITY (1, 1),
	[srt_name] nvarchar(50) NOT NULL
)
GO

CREATE TABLE [sport_type]
(
	[st_id] smallint NOT NULL IDENTITY (1, 1),
	[st_name] nvarchar(150) NOT NULL,
	[st_description] nvarchar(150) NULL
)
GO

CREATE TABLE [sports_category]
(
	[spc_id] tinyint NOT NULL IDENTITY (1, 1),
	[spc_name] nvarchar(150) NOT NULL
)
GO

CREATE TABLE [subscription]
(
	[sub_id] int NOT NULL IDENTITY (1, 1),
	[sub_client] int NOT NULL,
	[sub_membership] int NOT NULL,
	[sub_start_date] date NOT NULL,
	[sub_remaining_visits] varchar(50) NULL
)
GO

CREATE TABLE [zone]
(
	[zone_id] smallint NOT NULL IDENTITY (1, 1),
	[zone_name] nvarchar(150) NOT NULL,
	[zone_description] nvarchar(1000) NULL
)
GO

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE [activity] 
 ADD CONSTRAINT [PK_activity]
	PRIMARY KEY CLUSTERED ([act_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_activity_activity_type] 
 ON [activity] ([act_type] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_activity_sport_type] 
 ON [activity] ([act_sport] ASC)
GO

CREATE TRIGGER [dbo].[trg_activity_validate]
  ON [dbo].[activity]
  AFTER INSERT, UPDATE
AS
BEGIN
  SET NOCOUNT ON;

  IF EXISTS (
    SELECT 1
    FROM [inserted] AS [i]
    WHERE [i].[act_capacity]  <= 0
       OR [i].[act_duration]  <= 0
  )
  BEGIN
    THROW 51010, N'Ошибка: у занятия должна быть положительная вместимость и продолжительность.', 1;
  END
END;
GO

ALTER TABLE [activity_type] 
 ADD CONSTRAINT [PK_class_type]
	PRIMARY KEY CLUSTERED ([at_id] ASC)
GO

ALTER TABLE [building] 
 ADD CONSTRAINT [PK_building]
	PRIMARY KEY CLUSTERED ([build_id] ASC)
GO

ALTER TABLE [calendar] 
 ADD CONSTRAINT [PK_calendar]
	PRIMARY KEY CLUSTERED ([cal_date] ASC)
GO

ALTER TABLE [client] 
 ADD CONSTRAINT [PK_client]
	PRIMARY KEY CLUSTERED ([cl_id] ASC)
GO

ALTER TABLE [client_discount] 
 ADD CONSTRAINT [PK_client_discount]
	PRIMARY KEY CLUSTERED ([cdisc_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_client_discount_client] 
 ON [client_discount] ([cdisc_client] ASC)
GO

CREATE NONCLUSTERED INDEX [IDX_cdisc_client_daterange] 
 ON [client_discount] ([cdisc_client] ASC,[cdisc_date_start] ASC,[cdisc_date_end] ASC)
GO

CREATE TRIGGER [dbo].[trg_client_discount_dates]
  ON [dbo].[client_discount]
  AFTER INSERT, UPDATE
AS
BEGIN
  SET NOCOUNT ON;

  IF EXISTS (
    SELECT 1
    FROM [inserted] AS [i]
    WHERE [i].[cdisc_date_end] < [i].[cdisc_date_start]
  )
  BEGIN
    THROW 51012, N'Ошибка: дата окончания скидки должна быть не раньше даты её начала.', 1;
  END
END;
GO

ALTER TABLE [client_group] 
 ADD CONSTRAINT [PK_client_group]
	PRIMARY KEY CLUSTERED ([cl_gr_id] ASC)
GO

ALTER TABLE [client_visit] 
 ADD CONSTRAINT [PK_client_visit]
	PRIMARY KEY CLUSTERED ([cvis_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_client_visit_activity] 
 ON [client_visit] ([cvis_activity] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_client_visit_subscription] 
 ON [client_visit] ([cvis_subscription] ASC)
GO

CREATE NONCLUSTERED INDEX [IDX_cvis_subscription_date] 
 ON [client_visit] ([cvis_subscription] ASC,[cvis_date] ASC)
GO

ALTER TABLE [coach] 
 ADD CONSTRAINT [PK_coach]
	PRIMARY KEY CLUSTERED ([coach_id] ASC)
GO

ALTER TABLE [coach] 
 ADD CONSTRAINT [UNQ_employee] UNIQUE NONCLUSTERED ([coach_employee] ASC)
GO

ALTER TABLE [coach] 
 ADD CONSTRAINT [CHK_raiting_range] CHECK ([coach_rating] BETWEEN 0 AND 5)
GO

ALTER TABLE [coach] 
 ADD CONSTRAINT [CHK_raiting_non_negative] CHECK (coach_rating >= 0)
GO

CREATE NONCLUSTERED INDEX [IXFK_coach_employee] 
 ON [coach] ([coach_employee] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_coach_sports_category] 
 ON [coach] ([coach_sports_category] ASC)
GO

ALTER TABLE [department] 
 ADD CONSTRAINT [PK_departments]
	PRIMARY KEY CLUSTERED ([dep_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_department_employee] 
 ON [department] ([dep_manager] ASC)
GO

ALTER TABLE [employee] 
 ADD CONSTRAINT [PK_employee]
	PRIMARY KEY CLUSTERED ([empl_id] ASC)
GO

ALTER TABLE [equipment] 
 ADD CONSTRAINT [PK_equipment]
	PRIMARY KEY CLUSTERED ([eq_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_employee] 
 ON [equipment] ([eq_responsible] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_equipment_state] 
 ON [equipment] ([eq_state] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_equipment_type] 
 ON [equipment] ([eq_type] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_location] 
 ON [equipment] ([eq_location] ASC)
GO

ALTER TABLE [equipment_location_journal] 
 ADD CONSTRAINT [PK_equipment_location_journal]
	PRIMARY KEY CLUSTERED ([elj_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_location_journal_equipment] 
 ON [equipment_location_journal] ([elj_equipment] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_location_journal_location] 
 ON [equipment_location_journal] ([elj_from_location] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_location_journal_location_02] 
 ON [equipment_location_journal] ([elj_to_location] ASC)
GO

ALTER TABLE [equipment_state] 
 ADD CONSTRAINT [PK_equipment_state]
	PRIMARY KEY CLUSTERED ([est_id] ASC)
GO

ALTER TABLE [equipment_state_journal] 
 ADD CONSTRAINT [PK_equipment_state_journal]
	PRIMARY KEY CLUSTERED ([esj_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_state_journal_employee] 
 ON [equipment_state_journal] ([esj_change_by] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_state_journal_equipment] 
 ON [equipment_state_journal] ([esj_equipment] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_state_journal_equipment_state] 
 ON [equipment_state_journal] ([esj_new_state] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_equipment_state_journal_equipment_state_02] 
 ON [equipment_state_journal] ([esj_previous_state] ASC)
GO

ALTER TABLE [equipment_type] 
 ADD CONSTRAINT [PK_equipment_type]
	PRIMARY KEY CLUSTERED ([et_id] ASC)
GO

ALTER TABLE [event] 
 ADD CONSTRAINT [PK_event]
	PRIMARY KEY CLUSTERED ([ev_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_event_employee] 
 ON [event] ([ev_responsible] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_event_event_type] 
 ON [event] ([ev_type] ASC)
GO

ALTER TABLE [event_type] 
 ADD CONSTRAINT [PK_event_type]
	PRIMARY KEY CLUSTERED ([evt_id] ASC)
GO

ALTER TABLE [inventory] 
 ADD CONSTRAINT [PK_inventory]
	PRIMARY KEY CLUSTERED ([inv_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_inventory_inventory_type] 
 ON [inventory] ([inv_type] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_inventory_inventory_unit] 
 ON [inventory] ([inv_unit] ASC)
GO

ALTER TABLE [inventory_type] 
 ADD CONSTRAINT [PK_inventory_type]
	PRIMARY KEY CLUSTERED ([it_id] ASC)
GO

ALTER TABLE [inventory_unit] 
 ADD CONSTRAINT [PK_inventory_unit]
	PRIMARY KEY CLUSTERED ([iun_id] ASC)
GO

ALTER TABLE [location] 
 ADD CONSTRAINT [PK_location]
	PRIMARY KEY CLUSTERED ([loc_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_location_building] 
 ON [location] ([loc_building] ASC)
GO

ALTER TABLE [m2m_activity_coach] 
 ADD CONSTRAINT [PK_m2m_activity_coach]
	PRIMARY KEY CLUSTERED ([ac_activity] ASC,[ac_coach] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_activity_coach_activity] 
 ON [m2m_activity_coach] ([ac_activity] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_activity_coach_coach] 
 ON [m2m_activity_coach] ([ac_coach] ASC)
GO

ALTER TABLE [m2m_coach_sport_type] 
 ADD CONSTRAINT [PK_m2m_coach_sport_type]
	PRIMARY KEY CLUSTERED ([cspt_coach] ASC,[cspt_sport_type] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_coach_sport_type_coach] 
 ON [m2m_coach_sport_type] ([cspt_coach] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_coach_sport_type_sport_type] 
 ON [m2m_coach_sport_type] ([cspt_sport_type] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_department_employee_department] 
 ON [m2m_department_employee] ([de_department] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_department_employee_employee] 
 ON [m2m_department_employee] ([de_employee] ASC)
GO

ALTER TABLE [m2m_employee_position] 
 ADD CONSTRAINT [PK_m2m_employee_position]
	PRIMARY KEY CLUSTERED ([ep_employee] ASC,[ep_position] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_employee_position_employee] 
 ON [m2m_employee_position] ([ep_employee] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_employee_position_position] 
 ON [m2m_employee_position] ([ep_position] ASC)
GO

CREATE TRIGGER dbo.trg_after_insert_trainer_position
  ON dbo.m2m_employee_position
  AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- Вставляем в coach нового тренера, когда сотруднику присвоена должность "Тренер"
    INSERT INTO [dbo].[coach] ([coach_employee], [coach_rating])
    SELECT
        [i].[ep_employee],
        0.00            -- рейтинг по умолчанию
    FROM [inserted] AS [i]
    INNER JOIN [dbo].[position] AS [p]
        ON [p].[pos_id] = [i].[ep_position]
       AND [p].[pos_name] = N'Тренер'
    LEFT JOIN [dbo].[coach] AS c
        ON [c].[coach_employee] = [i].[ep_employee]
    WHERE [c].[coach_employee] IS NULL;  -- чтобы не дублировать запись, если она уже есть
END;
GO

ALTER TABLE [m2m_inventory_zone] 
 ADD CONSTRAINT [PK_m2m_inventory_zone]
	PRIMARY KEY CLUSTERED ([iz_inventory] ASC,[iz_zone] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_inventory_zone_inventory] 
 ON [m2m_inventory_zone] ([iz_inventory] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_inventory_zone_zone] 
 ON [m2m_inventory_zone] ([iz_zone] ASC)
GO

ALTER TABLE [m2m_membership_activity] 
 ADD CONSTRAINT [PK_m2m_membership_activity]
	PRIMARY KEY CLUSTERED ([ma_membership] ASC,[ma_activity] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_membership_activity_activity] 
 ON [m2m_membership_activity] ([ma_activity] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_membership_activity_membeership] 
 ON [m2m_membership_activity] ([ma_membership] ASC)
GO

ALTER TABLE [m2m_membership_schedule_pattern] 
 ADD CONSTRAINT [PK_m2m_membership_schedule_pattern]
	PRIMARY KEY CLUSTERED ([msp_membership] ASC,[msp_schedule_pattern] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_membership_schedule_pattern_membeership] 
 ON [m2m_membership_schedule_pattern] ([msp_membership] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_membership_schedule_pattern_schedule_recurrence_pattern] 
 ON [m2m_membership_schedule_pattern] ([msp_schedule_pattern] ASC)
GO

ALTER TABLE [m2m_schedule_item_coach] 
 ADD CONSTRAINT [PK_m2m_schedule_item_coach]
	PRIMARY KEY CLUSTERED ([sic_coach] ASC,[sic_schedule_item] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_schedule_item_coach_coach] 
 ON [m2m_schedule_item_coach] ([sic_coach] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_schedule_item_coach_schedule_item] 
 ON [m2m_schedule_item_coach] ([sic_schedule_item] ASC)
GO

ALTER TABLE [m2m_zone_location] 
 ADD CONSTRAINT [PK_m2m_zone_location]
	PRIMARY KEY CLUSTERED ([zl_location] ASC,[zl_zone] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_zone_location_location] 
 ON [m2m_zone_location] ([zl_location] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_m2m_zone_location_zone] 
 ON [m2m_zone_location] ([zl_zone] ASC)
GO

ALTER TABLE [membeership] 
 ADD CONSTRAINT [PK_membeership]
	PRIMARY KEY CLUSTERED ([memb_id] ASC)
GO

CREATE TRIGGER dbo.trg_membership_null_check
  ON dbo.membeership
  AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Проверяем, что ровно одно из полей memb_days_duration и memb_visit_number = NULL
    IF EXISTS (
        SELECT 1
        FROM inserted AS i
        WHERE 
           -- оба NULL или оба NOT NULL
           (
             (i.memb_days_duration   IS NULL AND i.memb_visit_number IS NULL)
             OR
             (i.memb_days_duration   IS NOT NULL AND i.memb_visit_number IS NOT NULL)
           )
    )
    BEGIN
        THROW 51050,
            N'Ошибка: для каждой записи memb_days_duration и memb_visit_number только одно может быть NULL.',
            1;
    END
END;
GO

ALTER TABLE [payment] 
 ADD CONSTRAINT [PK_payment]
	PRIMARY KEY CLUSTERED ([pay_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_payment_client] 
 ON [payment] ([pay_client] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_payment_payment_method] 
 ON [payment] ([pay_method] ASC)
GO

CREATE NONCLUSTERED INDEX [IDX_pay_client_date] 
 ON [payment] ([pay_client] ASC,[pay_date] ASC)
GO

ALTER TABLE [payment_method] 
 ADD CONSTRAINT [PK_payment_method]
	PRIMARY KEY CLUSTERED ([pm_id] ASC)
GO

ALTER TABLE [position] 
 ADD CONSTRAINT [PK_position]
	PRIMARY KEY CLUSTERED ([pos_id] ASC)
GO

ALTER TABLE [schedule_item] 
 ADD CONSTRAINT [PK_schedule]
	PRIMARY KEY CLUSTERED ([si_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_schedule_item_calendar] 
 ON [schedule_item] ([si_activity_date] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_schedule_item_schedule_recurrence_pattern] 
 ON [schedule_item] ([si_schedule_pattern] ASC)
GO

CREATE NONCLUSTERED INDEX [IDX_schedule_item_srp_activity_date] 
 ON [schedule_item] ([si_schedule_pattern] ASC,[si_activity_date] ASC)
GO

ALTER TABLE [schedule_pattern_coach] 
 ADD CONSTRAINT [PK_schedule_pattern_coach]
	PRIMARY KEY CLUSTERED ([spc_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_schedule_pattern_coach_coach] 
 ON [schedule_pattern_coach] ([spc_coach] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_schedule_pattern_coach_schedule_recurrence_pattern] 
 ON [schedule_pattern_coach] ([spc_schedule_pattern] ASC)
GO

ALTER TABLE [schedule_recurrence_pattern] 
 ADD CONSTRAINT [PK_activity_recurrence_pattern]
	PRIMARY KEY CLUSTERED ([srp_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_schedule_recurrence_pattern_activity] 
 ON [schedule_recurrence_pattern] ([srp_activity] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_schedule_recurrence_pattern_location] 
 ON [schedule_recurrence_pattern] ([srp_location] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_schedule_recurrence_pattern_schedule_recurrence_type] 
 ON [schedule_recurrence_pattern] ([srp_recurrence_type] ASC)
GO

CREATE NONCLUSTERED INDEX [IDX_srp_location_start_date] 
 ON [schedule_recurrence_pattern] ([srp_location] ASC,[srp_start_date] ASC)
GO


GO

ALTER TABLE [schedule_recurrence_type] 
 ADD CONSTRAINT [PK_schedule_recurrence_type]
	PRIMARY KEY CLUSTERED ([srt_id] ASC)
GO

ALTER TABLE [sport_type] 
 ADD CONSTRAINT [PK_sport_type]
	PRIMARY KEY CLUSTERED ([st_id] ASC)
GO

ALTER TABLE [sports_category] 
 ADD CONSTRAINT [PK_sports_category]
	PRIMARY KEY CLUSTERED ([spc_id] ASC)
GO

ALTER TABLE [subscription] 
 ADD CONSTRAINT [PK_subscription]
	PRIMARY KEY CLUSTERED ([sub_id] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_subscription_client] 
 ON [subscription] ([sub_client] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_subscription_membeership] 
 ON [subscription] ([sub_membership] ASC)
GO

CREATE NONCLUSTERED INDEX [IDX_sub_client] 
 ON [subscription] ([sub_client] ASC)
GO

CREATE NONCLUSTERED INDEX [IDX_sub_start_end_date] 
 ON [subscription] ([sub_start_date] ASC)
GO

ALTER TABLE [zone] 
 ADD CONSTRAINT [PK_facility]
	PRIMARY KEY CLUSTERED ([zone_id] ASC)
GO

/* Create Foreign Key Constraints */

ALTER TABLE [activity] ADD CONSTRAINT [FK_activity_activity_type]
	FOREIGN KEY ([act_type]) REFERENCES [activity_type] ([at_id]) ON DELETE Set Null ON UPDATE No Action
GO

ALTER TABLE [activity] ADD CONSTRAINT [FK_activity_sport_type]
	FOREIGN KEY ([act_sport]) REFERENCES [sport_type] ([st_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [client_discount] ADD CONSTRAINT [FK_client_discount_client]
	FOREIGN KEY ([cdisc_client]) REFERENCES [client] ([cl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [client_visit] ADD CONSTRAINT [FK_client_visit_activity]
	FOREIGN KEY ([cvis_activity]) REFERENCES [activity] ([act_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [client_visit] ADD CONSTRAINT [FK_client_visit_subscription]
	FOREIGN KEY ([cvis_subscription]) REFERENCES [subscription] ([sub_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [coach] ADD CONSTRAINT [FK_coach_employee]
	FOREIGN KEY ([coach_employee]) REFERENCES [employee] ([empl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [coach] ADD CONSTRAINT [FK_coach_sports_category]
	FOREIGN KEY ([coach_sports_category]) REFERENCES [sports_category] ([spc_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [department] ADD CONSTRAINT [FK_department_employee]
	FOREIGN KEY ([dep_manager]) REFERENCES [employee] ([empl_id]) ON DELETE Set Null ON UPDATE Cascade
GO

ALTER TABLE [equipment] ADD CONSTRAINT [FK_equipment_employee]
	FOREIGN KEY ([eq_responsible]) REFERENCES [employee] ([empl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment] ADD CONSTRAINT [FK_equipment_equipment_state]
	FOREIGN KEY ([eq_state]) REFERENCES [equipment_state] ([est_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment] ADD CONSTRAINT [FK_equipment_equipment_type]
	FOREIGN KEY ([eq_type]) REFERENCES [equipment_type] ([et_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment] ADD CONSTRAINT [FK_equipment_location]
	FOREIGN KEY ([eq_location]) REFERENCES [location] ([loc_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment_location_journal] ADD CONSTRAINT [FK_equipment_location_journal_equipment]
	FOREIGN KEY ([elj_equipment]) REFERENCES [equipment] ([eq_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment_location_journal] ADD CONSTRAINT [FK_equipment_location_journal_location]
	FOREIGN KEY ([elj_from_location]) REFERENCES [location] ([loc_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment_location_journal] ADD CONSTRAINT [FK_equipment_location_journal_location_02]
	FOREIGN KEY ([elj_to_location]) REFERENCES [location] ([loc_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment_state_journal] ADD CONSTRAINT [FK_equipment_state_journal_employee]
	FOREIGN KEY ([esj_change_by]) REFERENCES [employee] ([empl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment_state_journal] ADD CONSTRAINT [FK_equipment_state_journal_equipment]
	FOREIGN KEY ([esj_equipment]) REFERENCES [equipment] ([eq_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment_state_journal] ADD CONSTRAINT [FK_equipment_state_journal_equipment_state_new]
	FOREIGN KEY ([esj_new_state]) REFERENCES [equipment_state] ([est_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [equipment_state_journal] ADD CONSTRAINT [FK_equipment_state_journal_equipment_state_previous]
	FOREIGN KEY ([esj_previous_state]) REFERENCES [equipment_state] ([est_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [event] ADD CONSTRAINT [FK_event_employee]
	FOREIGN KEY ([ev_responsible]) REFERENCES [employee] ([empl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [event] ADD CONSTRAINT [FK_event_event_type]
	FOREIGN KEY ([ev_type]) REFERENCES [event_type] ([evt_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [inventory] ADD CONSTRAINT [FK_inventory_inventory_type]
	FOREIGN KEY ([inv_type]) REFERENCES [inventory_type] ([it_id]) ON DELETE Set Null ON UPDATE No Action
GO

ALTER TABLE [inventory] ADD CONSTRAINT [FK_inventory_inventory_unit]
	FOREIGN KEY ([inv_unit]) REFERENCES [inventory_unit] ([iun_id]) ON DELETE Set Null ON UPDATE No Action
GO

ALTER TABLE [location] ADD CONSTRAINT [FK_location_building]
	FOREIGN KEY ([loc_building]) REFERENCES [building] ([build_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [m2m_activity_coach] ADD CONSTRAINT [FK_m2m_activity_coach_activity]
	FOREIGN KEY ([ac_activity]) REFERENCES [activity] ([act_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_activity_coach] ADD CONSTRAINT [FK_m2m_activity_coach_coach]
	FOREIGN KEY ([ac_coach]) REFERENCES [coach] ([coach_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_coach_sport_type] ADD CONSTRAINT [FK_m2m_coach_sport_type_coach]
	FOREIGN KEY ([cspt_coach]) REFERENCES [coach] ([coach_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [m2m_coach_sport_type] ADD CONSTRAINT [FK_m2m_coach_sport_type_sport_type]
	FOREIGN KEY ([cspt_sport_type]) REFERENCES [sport_type] ([st_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [m2m_department_employee] ADD CONSTRAINT [FK_m2m_department_employee_department]
	FOREIGN KEY ([de_department]) REFERENCES [department] ([dep_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [m2m_department_employee] ADD CONSTRAINT [FK_m2m_department_employee_employee]
	FOREIGN KEY ([de_employee]) REFERENCES [employee] ([empl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [m2m_employee_position] ADD CONSTRAINT [FK_m2m_employee_position_employee]
	FOREIGN KEY ([ep_employee]) REFERENCES [employee] ([empl_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_employee_position] ADD CONSTRAINT [FK_m2m_employee_position_position]
	FOREIGN KEY ([ep_position]) REFERENCES [position] ([pos_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_inventory_zone] ADD CONSTRAINT [FK_m2m_inventory_zone_inventory]
	FOREIGN KEY ([iz_inventory]) REFERENCES [inventory] ([inv_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_inventory_zone] ADD CONSTRAINT [FK_m2m_inventory_zone_zone]
	FOREIGN KEY ([iz_zone]) REFERENCES [zone] ([zone_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_membership_activity] ADD CONSTRAINT [FK_m2m_membership_activity_activity]
	FOREIGN KEY ([ma_activity]) REFERENCES [activity] ([act_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_membership_activity] ADD CONSTRAINT [FK_m2m_membership_activity_membeership]
	FOREIGN KEY ([ma_membership]) REFERENCES [membeership] ([memb_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_membership_schedule_pattern] ADD CONSTRAINT [FK_m2m_membership_schedule_pattern_membeership]
	FOREIGN KEY ([msp_membership]) REFERENCES [membeership] ([memb_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_membership_schedule_pattern] ADD CONSTRAINT [FK_m2m_membership_schedule_pattern_schedule_recurrence_pattern]
	FOREIGN KEY ([msp_schedule_pattern]) REFERENCES [schedule_recurrence_pattern] ([srp_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_schedule_item_coach] ADD CONSTRAINT [FK_m2m_schedule_item_coach_coach]
	FOREIGN KEY ([sic_coach]) REFERENCES [coach] ([coach_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_schedule_item_coach] ADD CONSTRAINT [FK_m2m_schedule_item_coach_schedule_item]
	FOREIGN KEY ([sic_schedule_item]) REFERENCES [schedule_item] ([si_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_zone_location] ADD CONSTRAINT [FK_m2m_zone_location_location]
	FOREIGN KEY ([zl_location]) REFERENCES [location] ([loc_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [m2m_zone_location] ADD CONSTRAINT [FK_m2m_zone_location_zone]
	FOREIGN KEY ([zl_zone]) REFERENCES [zone] ([zone_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [payment] ADD CONSTRAINT [FK_payment_client]
	FOREIGN KEY ([pay_client]) REFERENCES [client] ([cl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [payment] ADD CONSTRAINT [FK_payment_payment_method]
	FOREIGN KEY ([pay_method]) REFERENCES [payment_method] ([pm_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [schedule_item] ADD CONSTRAINT [FK_schedule_item_calendar]
	FOREIGN KEY ([si_activity_date]) REFERENCES [calendar] ([cal_date]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [schedule_item] ADD CONSTRAINT [FK_schedule_item_schedule_recurrence_pattern]
	FOREIGN KEY ([si_schedule_pattern]) REFERENCES [schedule_recurrence_pattern] ([srp_id]) ON DELETE Set Null ON UPDATE Set Null
GO

ALTER TABLE [schedule_pattern_coach] ADD CONSTRAINT [FK_schedule_pattern_coach_coach]
	FOREIGN KEY ([spc_coach]) REFERENCES [coach] ([coach_id]) ON DELETE Cascade ON UPDATE No Action
GO

ALTER TABLE [schedule_pattern_coach] ADD CONSTRAINT [FK_schedule_pattern_coach_schedule_recurrence_pattern]
	FOREIGN KEY ([spc_schedule_pattern]) REFERENCES [schedule_recurrence_pattern] ([srp_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [schedule_recurrence_pattern] ADD CONSTRAINT [FK_schedule_recurrence_pattern_activity]
	FOREIGN KEY ([srp_activity]) REFERENCES [activity] ([act_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [schedule_recurrence_pattern] ADD CONSTRAINT [FK_schedule_recurrence_pattern_location]
	FOREIGN KEY ([srp_location]) REFERENCES [location] ([loc_id]) ON DELETE Cascade ON UPDATE Cascade
GO

ALTER TABLE [schedule_recurrence_pattern] ADD CONSTRAINT [FK_schedule_recurrence_pattern_schedule_recurrence_type]
	FOREIGN KEY ([srp_recurrence_type]) REFERENCES [schedule_recurrence_type] ([srt_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [subscription] ADD CONSTRAINT [FK_subscription_client]
	FOREIGN KEY ([sub_client]) REFERENCES [client] ([cl_id]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [subscription] ADD CONSTRAINT [FK_subscription_membeership]
	FOREIGN KEY ([sub_membership]) REFERENCES [membeership] ([memb_id]) ON DELETE No Action ON UPDATE No Action
GO

/* Create Table Comments */

EXEC sp_addextendedproperty 'MS_Description', 'Значение продолжительности в минутах', 'Schema', [dbo], 'table', [activity], 'column', [act_duration]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'activity_type', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Тип занятий', 'SCHEMA', 'dbo', 'table', 'activity_type' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Тип занятий', 'SCHEMA', 'dbo', 'table', 'activity_type' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'building', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Здания комплекса', 'SCHEMA', 'dbo', 'table', 'building' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Здания комплекса', 'SCHEMA', 'dbo', 'table', 'building' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'calendar', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Календарь дат, дней недель и прочей информации по дням на несколько лет вперёд для использования при генерации расписания', 'SCHEMA', 'dbo', 'table', 'calendar' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Календарь дат, дней недель и прочей информации по дням на несколько лет вперёд для использования при генерации расписания', 'SCHEMA', 'dbo', 'table', 'calendar' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'client_group', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Groups of clients', 'SCHEMA', 'dbo', 'table', 'client_group' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Groups of clients', 'SCHEMA', 'dbo', 'table', 'client_group' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'coach', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Тренера с их характеристиками', 'SCHEMA', 'dbo', 'table', 'coach' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Тренера с их характеристиками', 'SCHEMA', 'dbo', 'table', 'coach' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Связано с таблицей employee связью один к одному', 'Schema', [dbo], 'table', [coach], 'column', [coach_employee]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'department', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Отделы сотрудников спортивного комплекса', 'SCHEMA', 'dbo', 'table', 'department' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Отделы сотрудников спортивного комплекса', 'SCHEMA', 'dbo', 'table', 'department' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Допустимо значение Null - менеджер отдела может отсутствовать', 'Schema', [dbo], 'table', [department], 'column', [dep_manager]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'employee', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Сотрудники спортивного комплекса', 'SCHEMA', 'dbo', 'table', 'employee' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Сотрудники спортивного комплекса', 'SCHEMA', 'dbo', 'table', 'employee' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Поле, определяющее, работает ли сотрудник в комплексе', 'Schema', [dbo], 'table', [employee], 'column', [empl_is_active]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'equipment', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Оборудование (тренажёры, электротехника и другие крупные объекты, индексируемые своим серийным номером)', 'SCHEMA', 'dbo', 'table', 'equipment' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Оборудование (тренажёры, электротехника и другие крупные объекты, индексируемые своим серийным номером)', 'SCHEMA', 'dbo', 'table', 'equipment' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Должен быть уникальным', 'Schema', [dbo], 'table', [equipment], 'column', [eq_serial_number]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Null, если утилизровано', 'Schema', [dbo], 'table', [equipment], 'column', [eq_location]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'equipment_location_journal', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'История изменений локаций, в которых расположено оборудование', 'SCHEMA', 'dbo', 'table', 'equipment_location_journal' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'История изменений локаций, в которых расположено оборудование', 'SCHEMA', 'dbo', 'table', 'equipment_location_journal' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Null, если как таковой предыдущей локации не было (например, только что куплено)', 'Schema', [dbo], 'table', [equipment_location_journal], 'column', [elj_from_location]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'equipment_state', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Состояния, в которых могут находиться экземпляры оборудования (используется/на ремонте/сломан/списан)', 'SCHEMA', 'dbo', 'table', 'equipment_state' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Состояния, в которых могут находиться экземпляры оборудования (используется/на ремонте/сломан/списан)', 'SCHEMA', 'dbo', 'table', 'equipment_state' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'equipment_state_journal', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'История изменений статусов состояния оборудования', 'SCHEMA', 'dbo', 'table', 'equipment_state_journal' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'История изменений статусов состояния оборудования', 'SCHEMA', 'dbo', 'table', 'equipment_state_journal' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Может быть Null, если как такового предыдущего состояния нет', 'Schema', [dbo], 'table', [equipment_state_journal], 'column', [esj_previous_state]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Время изменения статуса состояния оборудования с точностью до секунд', 'Schema', [dbo], 'table', [equipment_state_journal], 'column', [esj_change_time]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'equipment_type', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Типы оборудования', 'SCHEMA', 'dbo', 'table', 'equipment_type' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Типы оборудования', 'SCHEMA', 'dbo', 'table', 'equipment_type' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'inventory', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Инвентарь - предметы, которые контролируются не поштучно, а в совокупности, отдельно не индексируются', 'SCHEMA', 'dbo', 'table', 'inventory' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Инвентарь - предметы, которые контролируются не поштучно, а в совокупности, отдельно не индексируются', 'SCHEMA', 'dbo', 'table', 'inventory' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Минимальное количесвто инвентаря данного типа, необходимое для комплекса', 'Schema', [dbo], 'table', [inventory], 'column', [inv_min_quantity]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'inventory_type', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Типы инвентарей', 'SCHEMA', 'dbo', 'table', 'inventory_type' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Типы инвентарей', 'SCHEMA', 'dbo', 'table', 'inventory_type' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'inventory_unit', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Единицы измерения, в которых количественно измеряется инвентарь', 'SCHEMA', 'dbo', 'table', 'inventory_unit' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Единицы измерения, в которых количественно измеряется инвентарь', 'SCHEMA', 'dbo', 'table', 'inventory_unit' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'location', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Локации (служебные помещения, спортивные залы, раздевлки, души, уличные площадки)', 'SCHEMA', 'dbo', 'table', 'location' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Локации (служебные помещения, спортивные залы, раздевлки, души, уличные площадки)', 'SCHEMA', 'dbo', 'table', 'location' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Null - если локация находится на улице', 'Schema', [dbo], 'table', [location], 'column', [loc_building]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Null, если loc_building равен Null', 'Schema', [dbo], 'table', [location], 'column', [loc_floor]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Null, если loc_building равен Null иначе Null, если локация не имеет номера помещения', 'Schema', [dbo], 'table', [location], 'column', [loc_room_number]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Уточнения по поводу местоположения локации', 'Schema', [dbo], 'table', [location], 'column', [loc_description]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'm2m_activity_coach', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Связь занятий и тренеров, которые эти знаятия ведут: предполагается, что одно и то же занятие могут вести одновременно два тренера', 'SCHEMA', 'dbo', 'table', 'm2m_activity_coach' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Связь занятий и тренеров, которые эти знаятия ведут: предполагается, что одно и то же занятие могут вести одновременно два тренера', 'SCHEMA', 'dbo', 'table', 'm2m_activity_coach' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Таблица связи тренера и видов спорта, в которых он специализируется', 'Schema', [dbo], 'table', [m2m_coach_sport_type], 'column', [cspt_sport_type]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'm2m_department_employee', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Связь сотрудников и отделов, в которых они работают', 'SCHEMA', 'dbo', 'table', 'm2m_department_employee' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Связь сотрудников и отделов, в которых они работают', 'SCHEMA', 'dbo', 'table', 'm2m_department_employee' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'm2m_employee_position', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Свзяь сотрудников и их должностей', 'SCHEMA', 'dbo', 'table', 'm2m_employee_position' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Свзяь сотрудников и их должностей', 'SCHEMA', 'dbo', 'table', 'm2m_employee_position' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'm2m_inventory_zone', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Связь, отражающая распределение инвенторя по зонам комплекса', 'SCHEMA', 'dbo', 'table', 'm2m_inventory_zone' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Связь, отражающая распределение инвенторя по зонам комплекса', 'SCHEMA', 'dbo', 'table', 'm2m_inventory_zone' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'm2m_membership_schedule_pattern', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Связь между абонементами и теми занятиями, на которые предоставляется доступ', 'SCHEMA', 'dbo', 'table', 'm2m_membership_schedule_pattern' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Связь между абонементами и теми занятиями, на которые предоставляется доступ', 'SCHEMA', 'dbo', 'table', 'm2m_membership_schedule_pattern' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'm2m_zone_location', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Связь зон и их локаций: какие локации включает в себя зоны', 'SCHEMA', 'dbo', 'table', 'm2m_zone_location' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Связь зон и их локаций: какие локации включает в себя зоны', 'SCHEMA', 'dbo', 'table', 'm2m_zone_location' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Null - когда  это абонемент на посещение только по количеству раз (memb_visit_number в таком случае не может быть NULL)', 'Schema', [dbo], 'table', [membeership], 'column', [memb_days_duration]
GO

EXEC sp_addextendedproperty 'MS_Description', 'NULL - если абонемент безлимитный в пределах указанной продолжительности (memb_days_duration в таком случае не может быть NULL)', 'Schema', [dbo], 'table', [membeership], 'column', [memb_visit_number]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'position', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Должность сотрудника комплекса', 'SCHEMA', 'dbo', 'table', 'position' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Должность сотрудника комплекса', 'SCHEMA', 'dbo', 'table', 'position' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'schedule_pattern_coach', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Шаблоны расписаний, по которым будут проводить занятия тренера, исходя из чего при генерации недельного расписания будет определяться, какой тренер проводит данное занятие

СДЕЛАТЬ ТРИГГЕР на вставку для проверки, не чаще ли тренер работает', 'SCHEMA', 'dbo', 'table', 'schedule_pattern_coach' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Шаблоны расписаний, по которым будут проводить занятия тренера, исходя из чего при генерации недельного расписания будет определяться, какой тренер проводит данное занятие

СДЕЛАТЬ ТРИГГЕР на вставку для проверки, не чаще ли тренер работает', 'SCHEMA', 'dbo', 'table', 'schedule_pattern_coach' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'schedule_recurrence_pattern', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Шаблоны расписаний занятий, по которым  генерируются еженедельные расписания', 'SCHEMA', 'dbo', 'table', 'schedule_recurrence_pattern' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Шаблоны расписаний занятий, по которым  генерируются еженедельные расписания', 'SCHEMA', 'dbo', 'table', 'schedule_recurrence_pattern' 
end
GO

EXEC sp_addextendedproperty 'MS_Description', 'Null, если нет предполагаемой даты завершения такого расписания', 'Schema', [dbo], 'table', [schedule_recurrence_pattern], 'column', [srp_end_date]
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'schedule_recurrence_type', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Типы повторений занятий (фиксированные значения: "Ежедневно", "По неделям", "По месяцам", "По годам")', 'SCHEMA', 'dbo', 'table', 'schedule_recurrence_type' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Типы повторений занятий (фиксированные значения: "Ежедневно", "По неделям", "По месяцам", "По годам")', 'SCHEMA', 'dbo', 'table', 'schedule_recurrence_type' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'sport_type', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Спортивные направления, которые реализуются в комплексе', 'SCHEMA', 'dbo', 'table', 'sport_type' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Спортивные направления, которые реализуются в комплексе', 'SCHEMA', 'dbo', 'table', 'sport_type' 
end
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'zone', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Инфраструктура комлекса по зонам', 'SCHEMA', 'dbo', 'table', 'zone' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Инфраструктура комлекса по зонам', 'SCHEMA', 'dbo', 'table', 'zone' 
end
GO

/* Create Views */

CREATE VIEW [activity_catalog_view] AS 
SELECT 
	[act_id],
	[st_name],
	[at_name]
FROM [activity]
JOIN [sport_type]
	ON [act_sport] = [st_id]
JOIN [activity_type]
	ON [act_type] = [at_id]
GO


CREATE VIEW [equipment_info_view] AS 
SELECT
    e.[eq_id],
    e.[eq_name],
    et.[et_name]        AS [Type],
    e.[eq_serial_number],
    e.[eq_purchase_date],
    e.[eq_lifespan_end_date],
    es.[est_name]    AS [State],
    e.[eq_location],
    l.[loc_name]        AS [Location],
    e.[eq_responsible],
    emp.[empl_name] + N' ' + emp.[empl_last_name] AS [Responsible]
FROM [equipment] AS e
JOIN [equipment_type]   AS et ON et.[et_id]   = e.[eq_type]
JOIN [equipment_state]  AS es ON es.[est_id] = e.[eq_state]
LEFT JOIN [location]    AS l  ON l.[loc_id]    = e.[eq_location]
JOIN [employee]         AS emp ON emp.[empl_id] = e.[eq_responsible]
;
GO


CREATE VIEW [schedule_view] AS 
SELECT [si_activity_date] AS [date],
		[si_schedule_pattern] AS [pattern],
		[at_name] AS [activity],
		[st_name] AS [sport],
		[act_capacity] AS [capacity],
		[srp_start_time] AS [start_time],
		CONVERT(TIME(0), DATEADD(MINUTE,[act_duration], CAST([srp_start_time] AS DATETIME))) AS [end_time],
		[srp_location] AS [loc_id],
		[loc_name],
		[coach_id],
		[empl_name] AS [coach_name],
		[empl_last_name] AS [coach_last_name],
		[emlp_patronymic] AS [coach_patronymic]
	FROM [schedule_item]
	JOIN
	[schedule_recurrence_pattern]
		ON [si_schedule_pattern] = [srp_id]
	JOIN [m2m_schedule_item_coach] 
		ON [sic_schedule_item] = [si_id]
	JOIN [coach]
		ON [sic_coach] = [coach_id]
	JOIN [employee]
		ON [empl_id] = [coach_employee]
	JOIN [activity]
		ON [srp_activity] = [act_id]
	JOIN [activity_type]
		ON [act_type] = [at_id]
	JOIN [sport_type]	
		ON [act_sport] = [st_id]
	JOIN [location]
		ON [loc_id] = [srp_location]
GO

 
if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'view', 'schedule_view', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'Читаемые данные расписания', 'SCHEMA', 'dbo', 'view', 'schedule_view' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'Читаемые данные расписания', 'SCHEMA', 'dbo', 'view', 'schedule_view' 
end
GO

/* Create Stored Procedures */

IF OBJECT_ID('dbo.FILL_CALENDAR', 'P') IS NOT NULL
  DROP PROCEDURE dbo.MAINTAIN_AND_REGENERATE_SCHEDULE;
GO

CREATE PROCEDURE [dbo].[FILL_CALENDAR] 
    @start_date DATE,
    @end_date   DATE
WITH EXECUTE AS OWNER
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE
        @last_cal_date DATE,
        @max_interval  INT = 50,
		@cur_weekday_num TINYINT = 1,
		@cur_week_num TINYINT = 1;
		;

    -- 1. Найти текущую максимальную дату в календаре
    SELECT @last_cal_date = MAX(cal_date)
    FROM dbo.calendar;

    -- 2. Если в таблице еще нет дат, начать с @start_date, иначе с дня после последней
    IF @last_cal_date IS NULL
        SET @last_cal_date = DATEADD(DAY, -1, @start_date);

    IF DATEADD(DAY, 1, @last_cal_date) != @start_date
        SET @start_date = DATEADD(DAY, 1, @last_cal_date);

    -- 3. Не позволять генерировать более @max_interval лет за раз
    IF DATEDIFF(YEAR, @start_date, @end_date) > @max_interval
        SET @end_date = DATEADD(YEAR, @max_interval, @start_date);

    -- 4. Если после корректировок окно пустое — выход
    IF @start_date > @end_date
        RETURN;

	SET @cur_week_num = DATEPART(WEEK, @start_date)
	IF dbo.GET_REAL_WEEKDAY_NUMBER(DATEPART(WEEKDAY, @start_date)) = 7
		SET @cur_week_num = @cur_week_num - 1;
	

	WHILE @start_date <= @end_date
	BEGIN
		SET @cur_weekday_num = dbo.GET_REAL_WEEKDAY_NUMBER(
			DATEPART(WEEKDAY, @start_date)
		);
		IF @cur_weekday_num = 1
			SET @cur_week_num = DATEPART(WEEK, @start_date)
		INSERT INTO [dbo].[calendar] (
			[cal_date],
			[cal_day_of_week],
			[cal_day_of_week_in_bits],
			[cal_day_of_month],
			[cal_day_of_year],
			[cal_week_number],
			[cal_month_number],
			[cal_year],
			[cal_is_holiday],
			[cal_description]
		)
		VALUES(
			@start_date,
			@cur_weekday_num,
            @cur_weekday_num,
            DATEPART(DAY, @start_date),
            DATEPART(DAYOFYEAR, @start_date),
            @cur_week_num,
            DATEPART(MONTH, @start_date),
            DATEPART(YEAR, @start_date),
            0,
            NULL
		);
		
		SET @start_date = DATEADD(DAY, 1, @start_date);
	END;
	
END
GO


IF OBJECT_ID('dbo.FORM_SCHEDULE', 'P') IS NOT NULL
  DROP PROCEDURE dbo.FORM_SCHEDULE;
GO

CREATE PROCEDURE dbo.FORM_SCHEDULE 
	@start_date DATE,
	@end_date DATE,
	@pattern_id INT,
	@generate_over BIT
WITH EXECUTE AS OWNER
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE 
		@last_cal_date DATE,
		@current_date DATE
		, @max_month_interval INT = 3;
	
	IF @start_date > @end_date
		RETURN;
		
	SET @current_date = GETDATE();

	-- 1. Найти текущую максимальную дату в календаре
    SELECT @last_cal_date = MAX(cal_date)
    FROM [dbo].[calendar];

    -- 2. Если в таблице еще нет дат, начать с @start_date, иначе с дня после последней
    IF @last_cal_date IS NULL
	BEGIN
		SET @last_cal_date = DATEADD(YEAR, 5, @current_date);
		EXECUTE [dbo].[FILL_CALENDAR]
			@start_date = @current_date,
			@end_date = @last_cal_date;
	END
	-- Если мало дат, то сгенерировать
	ELSE IF DATEDIFF(MONTH, @current_date, @last_cal_date) < @max_month_interval
	BEGIN
		SET @last_cal_date = DATEADD(YEAR, 5, @current_date);
		EXECUTE [dbo].[FILL_CALENDAR]
			@start_date = @current_date,
			@end_date = @last_cal_date;
	END;
	

    -- 3. Не позволять превышать @max_month_interval от текущей даты
    IF DATEDIFF(MONTH, @current_date, @end_date) > @max_month_interval
        SET @end_date = DATEADD(MONTH, @max_month_interval, @current_date);

    -- 4. Если после корректировок окно пустое — выход
    IF @start_date > @end_date
        RETURN;

	DECLARE 
		@last_schedule_date DATE;

	SELECT @last_schedule_date = MAX([si_activity_date]) FROM [schedule_item] WHERE [si_schedule_pattern] = @pattern_id

	IF @last_schedule_date >= @start_date
	BEGIN
		IF @generate_over = 0
			SET @start_date = @last_schedule_date
	END;

	DECLARE 
		@start_pattern_date DATE;
	SET @start_pattern_date = 
	(
		SELECT [srp].[srp_start_date] 
		FROM [schedule_recurrence_pattern] AS [srp] 
		WHERE [srp].[srp_id] = @pattern_id
	);
	IF  @start_date < @start_pattern_date
		SET @start_date = @start_pattern_date

	DECLARE 
		@end_pattern_date DATE;
	SET @end_pattern_date = 
	(
		SELECT [srp].[srp_end_date] 
		FROM [schedule_recurrence_pattern] AS [srp] 
		WHERE [srp].[srp_id] = @pattern_id
	);
	IF (@end_pattern_date IS NOT NULL) AND (@end_date > @end_pattern_date)
		SET @end_date = @end_pattern_date


    -- 2) Отфильтруем по паттернам повторения
    ;WITH [filtered_dates_by_activities_pattern] AS (
        SELECT
            [srp].[srp_id], 
            [calendar].[cal_date],
			[at].[at_name] AS [activity],
			[act].[act_capacity] AS [capacity],
			[srp].[srp_start_time] AS [start_time],
			CONVERT(TIME(0), DATEADD(MINUTE,[act_duration], CAST([srp_start_time] AS DATETIME))) AS [end_time],
			[srp].[srp_location] AS [loc_id],
			[location].[loc_name]
        FROM [calendar]
        INNER JOIN [schedule_recurrence_pattern] AS [srp]
            ON [calendar].[cal_date] BETWEEN @start_date 
                             AND @end_date
		JOIN [activity] AS [act]
			ON [srp_activity] = [act_id]
		JOIN [activity_type] AS [at]
			ON [act_type] = [at_id] 
		JOIN [sport_type] AS [st]
			ON [act_sport] = [st_id]
		JOIN [location]
		ON [loc_id] = [srp_location]
		
        WHERE [srp].[srp_id] = @pattern_id AND(
		  -- Ежедневно
            [srp].[srp_recurrence_type] = 1
          OR
            -- Еженедельно
            (
              [srp].[srp_recurrence_type] = 2
              AND (
					DATEDIFF(WEEK, [srp].[srp_start_date], [calendar].[cal_date])
					+([srp].[srp_recurrence_interval] - [srp].[srp_start_interval]) % [srp].[srp_recurrence_interval]
				)
				% [srp].[srp_recurrence_interval] = 0
              AND (POWER(2, [calendar].[cal_day_of_week] - 1) & [srp].[srp_week_days]) != 0
            )
          OR
            -- Ежемесячно (по дню месяца)
            (
              [srp].[srp_recurrence_type] = 3
              AND DAY([calendar].[cal_date]) = DAY([srp].[srp_start_date])
              AND( 
					DATEDIFF(MONTH, [srp].[srp_start_date], [calendar].[cal_date])
					+([srp].[srp_recurrence_interval] - [srp].[srp_start_interval]) % [srp].[srp_recurrence_interval]
				)
				 % [srp].[srp_recurrence_interval] = 0
			)
		)
          
    ),
	[filtered_dates_by_coach_pattern] AS (
        SELECT
            [spc].[spc_schedule_pattern], 
            [calendar].[cal_date],
			[spc].[spc_coach] AS [coach_id]
        FROM [calendar]
        INNER JOIN [schedule_pattern_coach] AS [spc]
            ON [calendar].[cal_date] BETWEEN @start_date 
                             AND @end_date
        WHERE [spc].[spc_schedule_pattern] = @pattern_id AND(
		  -- Ежедневно
            [spc].[spc_recurrence_type] = 1
          OR
            -- Еженедельно
            (
              [spc].[spc_recurrence_type] = 2
              AND ( 
				DATEDIFF(WEEK, [spc].[spc_start_date], [calendar].[cal_date]) 
				+ ([spc].[spc_recurrence_interval] - [spc].[spc_start_interval]) % [spc].[spc_recurrence_interval]
              ) % [spc].[spc_recurrence_interval] = 0
			  AND (POWER(2, [calendar].[cal_day_of_week] - 1) & [spc].[spc_week_days]) != 0
            )
          OR
            -- Ежемесячно (по дню месяца)
            (
              [spc].[spc_recurrence_type] = 3
              AND DAY([calendar].[cal_date]) = DAY([spc].[spc_start_date])
              AND( 
					DATEDIFF(MONTH, [spc].[spc_start_date], [calendar].[cal_date]) 
					+ ([spc].[spc_recurrence_interval] - [spc].[spc_start_interval]) % [spc].[spc_recurrence_interval]
				)% [spc].[spc_recurrence_interval] = 0
			)
		)
          
    ),
	[joined_dates] AS(
		SELECT
			[act_dates].[cal_date] AS [date],
			[act_dates].[srp_id] AS [pattern_id],
			[coach_dates].[cal_date] AS [coach_date],
			[coach_dates].[coach_id],
			[act_dates].[capacity],
			[act_dates].[activity],
			[act_dates].[start_time],
			[act_dates].[end_time],
			[act_dates].[loc_id]
		FROM [filtered_dates_by_activities_pattern] AS [act_dates]
		FULL JOIN [filtered_dates_by_coach_pattern] AS [coach_dates]
			ON [act_dates].[cal_date] = [coach_dates].[cal_date]

	)
	SELECT *
	INTO #tmp_dates_table
	FROM [joined_dates];

--	SELECT * FROM #tmp_dates_table;

	DECLARE @missedByCoach NVARCHAR(MAX);

	SELECT
		@missedByCoach = STRING_AGG(
			CONCAT('id: ', CAST(coach_id AS VARCHAR(10)), ', date: ', CONVERT(VARCHAR(10), coach_date, 120)),
			';' + CHAR(13) + CHAR(10)  -- разделитель “;” + переход на новую строку
		)
	FROM #tmp_dates_table
	WHERE [date] IS NULL;

	IF @missedByCoach IS NOT NULL
	BEGIN
		SET @missedByCoach = CONCAT('Ошибка! Шаблон расписания id=', CAST(@pattern_id AS VARCHAR(10)), ' не сформирован, так как есть тренера, у которых расписание выпадает на даты, когда занятий нет. ID этих тренеров:', CHAR(13), CHAR(10), @missedByCoach);
		THROW 51002, @missedByCoach, 1;
	END

	-- 2. Собираем просто даты, где [coach_date] IS NULL
	DECLARE @missedActivities NVARCHAR(MAX);

	SELECT
		@missedActivities = STRING_AGG(
			CONVERT(VARCHAR(10), [date], 120),
			';' + CHAR(13) + CHAR(10)
		)
	FROM #tmp_dates_table
	WHERE [coach_date] IS NULL;

	IF @missedActivities IS NOT NULL
	BEGIN
		SET @missedActivities = CONCAT('Ошибка! Шаблон расписания id=', CAST(@pattern_id AS VARCHAR(10)), ' не сформирован. На эти даты нет тренеров:', CHAR(13), CHAR(10), @missedActivities);
		THROW 51003, @missedActivities, 1;
	END


	DECLARE 
		@ConflictMessages NVARCHAR(4000);

	-- 1) Собираем все конфликты по локации и тренерам в одно временное представление
	WITH Conflicts AS (
		-- A) Конфликты по локации
		SELECT
			'Location'               AS ConflictType,
			CONVERT(VARCHAR(10), n.[date], 23)        AS ConflictDate,
			CAST(n.loc_id    AS VARCHAR(10))          AS Id,
			NULL                                        AS CoachId,
			n.start_time,
			n.end_time,
			CAST(e.pattern    AS VARCHAR(10))          AS ExistingPattern,
			CAST(n.pattern_id AS VARCHAR(10))          AS NewPattern
		FROM #tmp_dates_table AS n
		JOIN [dbo].[schedule_view] AS e
		  ON n.loc_id = e.loc_id
		 AND n.[date] = e.[date]
		 AND NOT (
			   n.end_time   <= e.start_time
			OR n.start_time >= e.end_time
		 )

		UNION ALL

		-- B) Конфликты по тренеру
		SELECT
			'Coach'                  AS ConflictType,
			CONVERT(VARCHAR(10), n.[date], 23)        AS ConflictDate,
			NULL                                        AS LocId,
			CAST(n.coach_id AS VARCHAR(10))           AS CoachId,
			n.start_time,
			n.end_time,
			CAST(e.pattern    AS VARCHAR(10))          AS ExistingPattern,
			CAST(n.pattern_id AS VARCHAR(10))          AS NewPattern
		FROM #tmp_dates_table AS n
		JOIN [dbo].[schedule_view] AS e
		  ON n.coach_id = e.coach_id
		 AND n.[date]    = e.[date]
		 AND NOT (
			   n.end_time   <= e.start_time
			OR n.start_time >= e.end_time
		 )
	)
	-- 2) Формируем читаемое сообщение для каждого конфликта
	
	,Formatted AS (
		SELECT
		  CASE
			WHEN ConflictType = 'Location'
			THEN
			  CONCAT(
				'Пересечение в локации [', Id, '] на ',
				ConflictDate, ' с ', 
				FORMAT(start_time, 'HH:mm'), '–', FORMAT(end_time, 'HH:mm'),
				' между шаблонами ', ExistingPattern,
				' и ', NewPattern
			  )
			ELSE
			  CONCAT(
				'Пересечение по тренеру [', CoachId, '] на ',
				ConflictDate, ' с ',
				FORMAT(start_time, 'HH:mm'), '–', FORMAT(end_time, 'HH:mm'),
				' между шаблонами ', ExistingPattern,
				' и ', NewPattern
			  )
		  END AS Message
		FROM Conflicts
	)
	-- 3) Собираем единую строку, разделённую переносами
	SELECT
		@ConflictMessages = STRING_AGG(Message, CHAR(13) + CHAR(10))
	FROM Formatted;

	-- 4) Если есть хоть один конфликт — бросаем исключение
	IF @ConflictMessages IS NOT NULL
	BEGIN
		THROW 51020, @ConflictMessages, 1;
	END

    -- 3) Вставляем новые записи если их ещё нет
    INSERT INTO [schedule_item] 
	(
		[si_schedule_pattern], 
		[si_activity_date]
	)
    SELECT
        #tmp_dates_table.[pattern_id],
        #tmp_dates_table.[date]
    FROM #tmp_dates_table
    LEFT JOIN [schedule_item] AS [sitm]
        ON [sitm].[si_schedule_pattern] = [pattern_id]
       AND [sitm].[si_activity_date] = #tmp_dates_table.[date]
    WHERE [sitm].[si_id] IS NULL

	INSERT INTO m2m_schedule_item_coach (
		[sic_schedule_item],
		[sic_coach]
	)
	SELECT
		si.si_id,
		t.coach_id
	FROM (
		-- 1) Берём уникальные сочетания шаблон-дата-тренер
		SELECT DISTINCT
			pattern_id,
			coach_id,
			[date]
		FROM #tmp_dates_table
	) AS t
	INNER JOIN schedule_item AS si
		ON si.si_schedule_pattern = t.pattern_id
	   AND si.si_activity_date    = t.[date]
	-- 2) Отфильтровываем уже имеющиеся связи
	WHERE NOT EXISTS (
		SELECT 1
		FROM m2m_schedule_item_coach AS mc
		WHERE mc.sic_schedule_item = si.si_id
		  AND mc.sic_coach         = t.coach_id
	);

END;
GO

if exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'procedure', 'FORM_SCHEDULE', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'В аргументе передаётся дата, для которой будет получено расписание на всю текущую неделю, начиная с понедельника, заканчивая воскресеньем
При автоматическом вызове передавать такой аргумент: DATEADD(WEEK, 1, GETDATE()), чтобы получить расписание следующей недели', 'SCHEMA', 'dbo', 'procedure', 'FORM_SCHEDULE' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'В аргументе передаётся дата, для которой будет получено расписание на всю текущую неделю, начиная с понедельника, заканчивая воскресеньем
При автоматическом вызове передавать такой аргумент: DATEADD(WEEK, 1, GETDATE()), чтобы получить расписание следующей недели', 'SCHEMA', 'dbo', 'procedure', 'FORM_SCHEDULE' 
end
GO

IF OBJECT_ID('dbo.GENERATE_SCHEDULES_FOR_ALL_PATTERNS', 'P') IS NOT NULL
  DROP PROCEDURE dbo.MAINTAIN_AND_REGENERATE_SCHEDULE;
GO

CREATE PROCEDURE dbo.GENERATE_SCHEDULES_FOR_ALL_PATTERNS
  @start_date DATE,
  @end_date   DATE
WITH EXECUTE AS OWNER
AS
BEGIN
  SET NOCOUNT ON;

  DECLARE 
        @pattern_id    INT,
        @err_number    INT,
        @err_severity  TINYINT,
        @err_state     TINYINT,
        @err_message   NVARCHAR(4000);

	BEGIN TRANSACTION;
  -- Курсор по всем шаблонам
  DECLARE pattern_cursor CURSOR FOR
    SELECT srp_id
    FROM dbo.schedule_recurrence_pattern
    -- при необходимости фильтр: WHERE srp_end_date IS NULL OR srp_end_date >= @start_date

  OPEN pattern_cursor;
  FETCH NEXT FROM pattern_cursor INTO @pattern_id;

  WHILE @@FETCH_STATUS = 0
  BEGIN
    BEGIN TRY
      EXEC dbo.FORM_SCHEDULE
        @start_date  = @start_date,
        @end_date    = @end_date,
        @pattern_id  = @pattern_id,
		@generate_over = 0;
    END TRY
    BEGIN CATCH
      SELECT
                @err_number   = ERROR_NUMBER(),
                @err_severity = ERROR_SEVERITY(),
                @err_state    = ERROR_STATE(),
                @err_message  = ERROR_MESSAGE();

            -- Откатываем всю транзакцию
            IF XACT_STATE() <> 0
                ROLLBACK TRANSACTION;

            -- Повторно выбрасываем исходное исключение
            THROW 50002, @err_message, @err_state;
    END CATCH

    FETCH NEXT FROM pattern_cursor INTO @pattern_id;
  END

  CLOSE pattern_cursor;
  DEALLOCATE pattern_cursor;
  COMMIT TRANSACTION;
END;
GO


IF OBJECT_ID('dbo.MAINTAIN_AND_REGENERATE_SCHEDULE', 'P') IS NOT NULL
  DROP PROCEDURE dbo.MAINTAIN_AND_REGENERATE_SCHEDULE;
GO

CREATE PROCEDURE dbo.MAINTAIN_AND_REGENERATE_SCHEDULE
WITH EXECUTE AS OWNER
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE 
        @today      DATE = CAST(GETDATE() AS DATE),
        @start_date DATE,
        @end_date   DATE;

    -- 1. Удаляем из [schedule_item] все записи старше, чем +2 месяца
    DELETE FROM dbo.schedule_item
    WHERE si_activity_date >= DATEADD(MONTH, 2, @today);
	-- 2. Готовим параметры для генерации новых расписаний
    SET @start_date = DATEADD(MONTH, 2, @today);
    SET @end_date   = DATEADD(MONTH, 3, @today);

    -- 3. Вызываем регенерацию расписаний для всех шаблонов
    EXEC dbo.GENERATE_SCHEDULES_FOR_ALL_PATTERNS
        @start_date = @start_date,
        @end_date   = @end_date;
END;
GO


-- Удаляем старую версию, если она есть
IF OBJECT_ID('dbo.MAINTAIN_CALENDAR_ANNUALLY', 'P') IS NOT NULL
    DROP PROCEDURE dbo.MAINTAIN_CALENDAR_ANNUALLY;
GO

-- Создаём новую хранимую процедуру
CREATE PROCEDURE dbo.MAINTAIN_CALENDAR_ANNUALLY
WITH EXECUTE AS OWNER
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE
        @max_cal_date DATE,
        @start_date   DATE,
        @end_date     DATE;

    -- 1. Определяем текущую максимальную дату в календаре
    SELECT @max_cal_date = MAX(cal_date)
    FROM dbo.calendar;

    -- 2. Если календарь пуст — начинаем с сегодняшней даты, иначе — со следующего дня после последней даты
    IF @max_cal_date IS NULL
        SET @start_date = CAST(GETDATE() AS DATE);
    ELSE
        SET @start_date = DATEADD(DAY, 1, @max_cal_date);

    -- 3. Конец интервала — ровно через год после стартовой даты
    SET @end_date = DATEADD(YEAR, 1, @start_date);

    -- 4. Вызываем процедуру генерации календаря
    EXEC dbo.FILL_CALENDAR
        @start_date = @start_date,
        @end_date   = @end_date;
END;
GO

